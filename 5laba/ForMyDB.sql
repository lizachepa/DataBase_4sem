USE CEG_MyBase;
/*1 сформировать список наименований кафедр (столбец PULPIT_NAME),
которые находятся на факультете (таблица FACULTY), обеспечивающем подготовку по специальности, в наименовании (столбец PROFESSION_ NAME) которого содержится слово технология или технологии.*/
SELECT Заказы.Дата_поставки,Товары.Наименование
FROM Заказы,Товары
WHERE Заказы.Код_товара=Товары.Код_товара AND
			Вид_товара IN(SELECT Вид_товара FROM Товары
												WHERE( Вид_товара LIKE '%наушники%' OR 
												Вид_товара LIKE '%телефон%'))



/*2. Переписать запрос пункта 1 таким образом,чтобы тот же подзапрос был записан в конструкции INNER JOIN секции FROM внешнего запроса.
При этом результат выполнения запроса должен быть аналогичным результату исходного запроса. */

SELECT Заказы.Дата_поставки,Товары.Наименование
FROM Заказы INNER JOIN Товары
ON Заказы.Код_товара=Товары.Код_товара 
WHERE Вид_товара In (SELECT Вид_товара FROM Товары 
						WHERE (Вид_товара LIKE '%наушники%' OR 
								Вид_товара LIKE '%телефон%'))


/*3. Переписать запрос, реализующий 1 пункт без использования подзапроса. 
Примечание: использовать соединение INNER JOIN трех таблиц*/
SELECT Distinct Заказы.Дата_поставки,Товары.Наименование
FROM Заказы INNER JOIN Товары
ON Заказы.Код_товара=Товары.Код_товара 
INNER JOIN Покупатели
ON Заказы.Код_покупателя=Покупатели.Код_покупателя
WHERE(Вид_товара LIKE '%наушники%' OR
		Вид_товара LIKE '%телефон%')

/*4. На основе таблицы AUDITORIUM сформировать список аудиторий самых больших вместимостей (столбец AUDI-TORIUM_CAPACITY) для каждого ти-па аудитории (AUDITORIUM_TYPE).
При этом результат следует отсортиро-вать в порядке убывания вместимости. Примечание: использовать коррелируе-мый подзапрос c секциями TOP и OR-DER BY. */
SELECT * FROM Товары a
WHERE  Стоимость = (
	SELECT TOP(1) Стоимость FROM Товары aa
	WHERE aa.Стоимость=a.Стоимость 
	ORDER BY Стоимость desc)
ORDER BY Стоимость desc

/*5. Заказы без адреса */
SELECT Distinct Покупатели.Фамилия
FROM Покупатели
WHERE not exists (SELECT * FROM Заказы
WHERE Заказы.Код_покупателя=Покупатели.Код_покупателя) 

SELECT Distinct Покупатели.Фамилия
FROM Покупатели
WHERE exists (SELECT * FROM Заказы
WHERE Заказы.Код_покупателя=Покупатели.Код_покупателя ) 


/*6. На основе таблицы PROGRESS сформировать строку, содержащую средние значения оценок (столбец NOTE) по дисциплинам, имеющим сле-дующие коды: ОАиП, БД и СУБД. 
Примечание: использовать три некоррелированных подзапроса в списке SELECT; в подзапросах применить агрегатные функции AVG. */
SELECT  top 1
	(select avg(Стоимость) from Товары
	where Вид_товара like 'Наушники')[Наушники],
	(select avg(Стоимость) from Товары
	where Вид_товара Like 'Телефон')[Телефон], 
	(select avg(Стоимость) from Товары
	where Вид_товара Like 'Фрукты')[Фрукты]
FROM Товары

/*7. Разработать SELECT-запрос, демонстрирующий принцип применения ALL совместно с подзапросом.*/
SELECT Наименование,Вид_товара,Стоимость FROM Товары
WHERE Товары.Стоимость>= all(select Стоимость from Товары
						where Стоимость>42)

/*8. Разработать SELECT-запрос, демонстрирующий принцип применения ANY совместно с подзапросом*/
SELECT Наименование,Вид_товара,Стоимость FROM Товары
WHERE Товары.Стоимость>= any(select Стоимость from Товары
					where Стоимость>42)

